;Bowei Wang 1462495
;cmput325 assignment 1

;Question 1:

;xmember function is defined to check whether x is in y, if so, return T else keep checking 
;until all the element in y is checked and return nil

(defun xmember  (X Y)
	(cond 		
		((equal Y nil) nil)
		((null Y) nil)
		((equal (car Y) X) T)
		(t (xmember X (cdr Y)))
                )
        
)
;Test Cases:

(print(xmember nil nil)); ==> nil
(print(xmember nil '(nil))) ; ==> T
(print(xmember nil '((nil)))); ==> nil
(print(xmember '(nil) '(1 2 3 (nil)))); ==> T
(print(xmember '(nil) '(nil))); ==> nil

;Question 2:

;flatten function is defined to remove all the double list and make all the elements in the list
;to be an atom, it will just check whether the element is an atom, if not it will call it self again
;to remove duplicate list until all the inside list is removed

(defun flatten (x)
    (cond
        ((null x) x)
        ((atom (car x)) (cons (car x) (flatten (cdr x))))
        (t (append (flatten (car x)) (flatten (cdr x))))
    )
)

;Test Cases:

(print(flatten '(a (b c) d))); ==> (a b c d)
(print(flatten '((((a)))))); ==>  (a)
(print(flatten '(a (b c) (d ((e)) f)))); ==> (a b c d e f)

;Qustion 3:

;function remove-duplicate is defined to remove all the duplicate elements in list x.
;It checks whether cdr x has car x, if so ,it will remove car x

(defun remove-duplicate (x)
	(cond
		((null x) x)
		( (equal (xmember (car x) (cdr x)) T)  (remove-duplicate (cdr x)))
		(t (cons (car x) (remove-duplicate (cdr x))))
	)
       
)

;Test case:

(print(remove-duplicate '(a b c a d b))); ==> (a b c d)

;Question 4:	 

;function mix will mix two lists together

(defun mix(x y)
	(cond
		((equal nil x) y)
		((equal nil y) x)
		((null x)  y)
		((null y)  x)
		(t (cons (car x) (mix y (cdr x))))
                )
)

;Test cases:

(print(mix '(a b c) '(d e f))); ==>(a d b e c f)
(print(mix '(1 2 3) '(a))); ==>(1 a 2 3)
(print(mix '((a) (b c)) '(d e f g h))); ==>((a) d (b c) e f g h)
(print(mix '(1 2 3) nil)); ==>(1 2 3)
(print(mix '(1 2 3) '(nil))); ==>(1 nil 2 3)
			
;Qustion 5:

;function filter will add all the subsets that an atom x and a list y can make

(defun filter(x y)
        (cond
		((null y) y)
		((equal nil (cdr y)) (list x (append x y)))
		(t (append (filter (append x (list(car y))) (cdr y)) (filter x (cdr y))))
                )
)

;function subsets will keep handle all the subsets of current list x
;pass all the possible cases to filter to handle

(defun subsets(x)
	(cond
               
                ;((equal nil x) (list nil))
		((equal nil (cdr x)) (list x))
		( t (append  (subsets (cdr x)) (filter (list(car x)) (cdr x))))
                )
)

;function allsubsets will pass the list to function subset and handle the nil case

(defun allsubsets (x)
  (cond
        ((equal nil x) (list nil))
        (t (append  (subsets x) (list nil)))
        )
)
;Test cases:

(print(allsubsets nil)) ; ==> (nil)
(print(allsubsets '(a))); ==> (nil (a)) 
(print(allsubsets '(a b c d))) ; ==> ((D) (C) (C D) (B C) (B C D) (B) (B D) (A B C) (A B C D) (A B) (A B D) (A C) (A C D) (A) (A D) NIL) 

;Question 6
;Q1 reach

;the function reached is to call a bunch of function and directly return the result
;it first call singlereach to get the list of website that x can reach
;then all multiplereach to handle all the website that generated by singlereach
;remove-duplicate will remove the duplicate in the return list, then call removenumber to remove
;the x that given in the left

(defun reached (x y)
	(removenumber x (remove-duplicate (multiplereach (singlereach x y) y)))	
)

;the function removenumber will remove the element x that given as the left part in the function

(defun removenumber (x y)
	(cond
                ((equal y nil) nil)
		((equal x (car y))  (removenumber x (cdr y))) 
		(t (append (list(car y)) (removenumber x (cdr y))))
	)
)

;the function multiplereach will handle all the possible reaches of x
;the list will become larger and larger until all the cases is handled

(defun multiplereach (x y)
	(cond
		((equal x nil) nil)
                ((and (equal (multiplereach (cdr x) y) nil) (equal (singlereach (car x) y) nil)) (list(car x)))
                ((equal (multiplereach (cdr x) y) nil) (append (singlereach (car x) y) (list(car x))))
                ((equal (singlereach (car x) y) nil) (append (multiplereach (cdr x) y) (list(car x))))
		(t (append(append (singlereach (car x) y) (multiplereach (cdr x) y)) (list(car x))))
	)
)

;the function singlereach is to generate a list that the website x can reach

(defun singlereach (x y)
	(cond
		((equal nil y) nil)
		((equal (car(cdr(car y))) x) (singlereach x (cdr y)))
		((equal (car(car y)) x ) (append(append (cdr(car y)) (singlereach (cadar y) y)) (singlereach x (cdr y))))
		(t (singlereach x (cdr y)))
	)
)

		
(print(reached 'a '((b b)))); ==> NIL
(print(reached 'a '((b a)))); ==> NIL
(print(reached 'a '((a b)(a c)(a d)))); ==> (b c d)
(print(reached 'a '((c d)(d b)(d m)(d e)(a b)(b c)))); ==> (b c d e m)
(print(reached 'a '((e x)(b x)(x e)(a a)(a b)))); ==> (b e x) 

;Q2 rank

;rank is defined to call multiple functions to generate the sorted rank
;first call remove duplicate because duplicate is not an effective link and should'n be recorded
;initrank will count the number of that each element in x shows
;mySort will sort the element by count
;removenum will remove the attached number that added in function initrank

(defun rank (x y)
        (removenum (mySort (initrank x (remove-duplicate y))))
)

;removenum is defined to remove the attached number that added in function initrank

(defun removenum (x)
        (cond
                ((equal x nil) nil)
                (t (append (list(caar x)) (removenum (cdr x))))
        )
)

;function mySort and greaterThan is defined to sort the websites
;these two functions are given in assignment
                
(defun mySort (L)
        (sort L 'greaterThan)
)

(defun greaterThan (L1 L2)
        (> (cadr L1) (cadr L2))
)

;function initrank is defined to calculate the number of access for each website

(defun initrank (x y)
        (cond 
                ((equal x nil) nil)
                (t (append (list(list (car x) (countnum (car x) y))) (initrank (cdr x) y)))
        )
)

;function countnum is defined to check how many times a website x has been accessed in y

(defun countnum (x y)
        (cond
                ((equal y nil) 0)
                ((equal (caar y) x) (countnum x (cdr y)))
                ((equal (cadar y) x) (+ 1 (countnum x (cdr y))))
                (t  (countnum x (cdr y)))
        )
)

;Test cases:

(print (rank '(a b c d) '((d c)(a c)(b d)(c c)(a a)(d b)))); ==> (c b d a) OR (c d b a)
(print (rank '(a b) '((a a)(b b)(a b)(c a)))); ==> (a b) OR (b a)
(print (rank '(a b c) '((a b)(a c)(a d)))); ==> (b c a) OR (c b a)
(print (rank '(b a k) '((k b)(b k)(a k)(k a)))); ==> (k a b) OR (k b a)
(print (rank '(m n) '((n m)(m m)(t n)(s t)(t s)))); ==> (m n) OR (n m)